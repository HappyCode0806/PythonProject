# 성적 관리 프로그램을 만들어보자.
"""
- 성적 관리 프로그램
* 학생 점수를 입력 받아 점수에 따라서 코멘트(컨설팅)을 해주는 프로그램을 만들어보자.

100점 : 잘했어요~
80점 이상 : 괜찮아요~
40점 이상 : 노력해요~
40점 이하 : 공부 안했니?

위 메세지를 출력하는 프로그램을 만들어보자.

"""
score = int(input("점수를 입력해주세요 : "))

if(score == 100):
    print("<멘토> : 잘했어요~")
elif(score >= 80):
    print("<멘토> : 괜찮아요~")
elif(score >= 40):
    print("<멘토> : 노력해요~")
elif(score < 40):
    print("<멘토> : 공부 안했니?")
else:
    print("점수를 다시 입력해주세요!(범위 : 0 ~ 100)")

# 사용자가 맞게 입력한다면 그래도 쓸만한 프로그램이 될 것이다.
# 하지만 점수를 150과 같이 말도 안되는 값을 입력해버리면...?
# ex) 150 (입력)
# 결과 값 : 괜찮아요~

# if, elif문은 읽었을 때 참인 순간 명령을 실행하고 나서 조건문을 아예 나가 버린다.
# 그렇기에 점수를 이상하게 기록하였을 때 오류 메세지를 출력하도록 만들었던 else문까지 읽지도 않고 프로그램이 끝난 것이다.
# 조건문의 조건을 여러개 사용하고 싶을 때는 어떻게 할까...?

print()
input("다음 코드의 결과를 보려면 Enter키를 눌러주세요.")
print("> 다음은 개선한 코드의 결과입니다~!")
print()

score = int(input("점수를 입력해주세요 : "))

if(score == 100):
    print("<멘토> : 잘했어요~")
elif(score >= 80 and score < 100):
    print("<멘토> : 괜찮아요~")
elif(score >= 40 and score < 80):
    print("<멘토> : 노력해요~")
elif(score < 40 and score >= 0):
    print("<멘토> : 공부 안했니?")
else:
    print("점수를 다시 입력해주세요!(범위 : 0 ~ 100)")

# 위와 같이 코드를 개선하면, 정확한 범위의 조건을 줄 수 있다.


# 여기서 사용된 and는 무엇인가?
"""
< and 조건, or 조건 - "논리연산자" >

- and 조건이란?
사용 방법은 'and'의 앞 뒤로 boolean 형태의 값이 오게한다.
'True' and 'False'
and 조건은 앞의 boolean 값과 뒤의 boolean 값이 모두 "True" 일 경우에 True를 반환해주는 조건식이다.
둘 중 하나라도 False라면 False라는 값을 반환해준다.

- or 조건이란?
사용 방법은 'or'의 앞 뒤로 boolean 형태의 값이 오게한다.
'False' or 'True'
or 조건은 둘 중 하나라도 "True" 일 경우 True를 반환해주는 조건식이다.
둘 다 False라면 False라는 값을 반환해준다.

"""

"""

< 비교 연산자 >
== : 같다
!= : 다르다
> : 크다
>= : 크거나 같다
< : 작다
<= : 작거나 같다

"""

# 마지막 숙제
# 해커들을 위한 숙제이므로 강의중이라면 넘어가도 좋습니다.(다음 챕터에 해결 방법 나옴)
# 만약 숫자가 아닌 "문자"를 입력했다면??
# 오류가 발생한다.
# 해커가 된다면 이런식으로 코드를 보고, 실행해보며, 지금과 같이 문자를 넣어보는 테스트를 통해 취약점을 찾을 것이다.
# 다음 챕터에서 어떻게 처리를 하는지 확인을 해보자.